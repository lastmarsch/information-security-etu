[
  {
    "ID": 1,
    "Name": "Accessing Functionality Not Properly Constrained by ACLs",
    "Abstraction": "Standard",
    "Status": "Draft",
    "Description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
    "Extended_Description": null,
    "Alternate_Terms": [],
    "Likelihood_Of_Attack": "High",
    "Typical_Severity": "High",
    "Related_Attack_Patterns": [
      { "Exclude_Related": [], "Nature": "ChildOf", "CAPEC_ID": "122" },
      { "Exclude_Related": [], "Nature": "CanPrecede", "CAPEC_ID": "17" }
    ],
    "Execution_Flow": [
      {
        "Step": "1",
        "Phase": "Explore",
        "Description": "[Survey] The attacker surveys the target application, possibly as a valid and authenticated user",
        "Technique": [
          "Spidering web sites for all available links",
          "Brute force guessing of resource names",
          "Brute force guessing of user names / credentials",
          "Brute force guessing of function names / actions"
        ]
      },
      {
        "Step": "2",
        "Phase": "Explore",
        "Description": "[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions",
        "Technique": [
          "Use the web inventory of all forms and inputs and apply attack data to those inputs.",
          "Use a packet sniffer to capture and record network traffic",
          "Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment."
        ]
      },
      {
        "Step": "3",
        "Phase": "Experiment",
        "Description": "[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.",
        "Technique": [
          "Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)"
        ]
      }
    ],
    "Prerequisites": [
      "The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.",
      "The various resources, or individual URLs, must be somehow discoverable by the attacker",
      "The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource."
    ],
    "Skills_Required": [
      {
        "Level": "Low",
        "Description": "In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly."
      }
    ],
    "Resources_Required": [
      "None: No specialized resources are required to execute this type of attack."
    ],
    "Indicators": [],
    "Consequences": [
      {
        "Scope": ["Confidentiality", "Access Control", "Authorization"],
        "Impact": ["Gain Privileges"],
        "Likelihood": null,
        "Note": null
      }
    ],
    "Mitigations": [
      "In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as \"NoAccess\", with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic."
    ],
    "Related_Weaknesses": [
      "276",
      "285",
      "434",
      "693",
      "732",
      "1191",
      "1193",
      "1220",
      "1297",
      "1311",
      "1314",
      "1315",
      "1318",
      "1320",
      "1321",
      "1327"
    ],
    "Taxonomy_Mappings": [
      {
        "Taxonomy_Name": "ATTACK",
        "Entry_ID": "1574.010",
        "Entry_Name": "Hijack Execution Flow: ServicesFile Permissions Weakness",
        "Mapping_Fit": null
      }
    ]
  },
  {
    "ID": 26,
    "Name": "Leveraging Race Conditions",
    "Abstraction": "Meta",
    "Status": "Stable",
    "Description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by \"running the race\", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",
    "Extended_Description": null,
    "Alternate_Terms": [],
    "Likelihood_Of_Attack": "High",
    "Typical_Severity": "High",
    "Related_Attack_Patterns": [],
    "Execution_Flow": [
      {
        "Step": "1",
        "Phase": "Explore",
        "Description": "The adversary explores to gauge what level of access they have.",
        "Technique": []
      },
      {
        "Step": "2",
        "Phase": "Experiment",
        "Description": "The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action.",
        "Technique": []
      },
      {
        "Step": "3",
        "Phase": "Exploit",
        "Description": "The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host.",
        "Technique": []
      }
    ],
    "Prerequisites": [
      "A resource is accessed/modified concurrently by multiple processes such that a race condition exists.",
      "The adversary has the ability to modify the resource."
    ],
    "Skills_Required": [
      {
        "Level": "Medium",
        "Description": "Being able to \"run the race\" requires basic knowledge of concurrent processing including synchonization techniques."
      }
    ],
    "Resources_Required": [],
    "Indicators": [],
    "Consequences": [
      {
        "Scope": ["Confidentiality", "Access Control", "Authorization"],
        "Impact": ["Gain Privileges"],
        "Likelihood": null,
        "Note": null
      },
      {
        "Scope": ["Integrity"],
        "Impact": ["Modify Data"],
        "Likelihood": null,
        "Note": null
      }
    ],
    "Mitigations": [
      "Use safe libraries to access resources such as files.",
      "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.",
      "Use synchronization to control the flow of execution.",
      "Use static analysis tools to find race conditions.",
      "Pay attention to concurrency problems related to the access of resources."
    ],
    "Related_Weaknesses": [
      "368",
      "363",
      "366",
      "370",
      "362",
      "662",
      "689",
      "667",
      "665",
      "1223",
      "1254",
      "1298"
    ],
    "Taxonomy_Mappings": []
  },
  {
    "ID": 29,
    "Name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
    "Abstraction": "Standard",
    "Status": "Draft",
    "Description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",
    "Extended_Description": null,
    "Alternate_Terms": [],
    "Likelihood_Of_Attack": "High",
    "Typical_Severity": "High",
    "Related_Attack_Patterns": [
      { "Exclude_Related": ["515"], "Nature": "ChildOf", "CAPEC_ID": "26" }
    ],
    "Execution_Flow": [
      {
        "Step": "1",
        "Phase": "Explore",
        "Description": "The adversary explores to gauge what level of access they have.",
        "Technique": []
      },
      {
        "Step": "2",
        "Phase": "Experiment",
        "Description": "The adversary confirms access to a resource on the target host. The adversary confirms ability to modify the targeted resource.",
        "Technique": []
      },
      {
        "Step": "3",
        "Phase": "Exploit",
        "Description": "The adversary decides to leverage the race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary can replace the resource and cause an escalation of privilege.",
        "Technique": []
      }
    ],
    "Prerequisites": [
      "A resource is access/modified concurrently by multiple processes.",
      "The adversary is able to modify resource.",
      "A race condition exists while accessing a resource."
    ],
    "Skills_Required": [
      {
        "Level": "Medium",
        "Description": "This attack can get sophisticated since the attack has to occur within a short interval of time."
      }
    ],
    "Resources_Required": [],
    "Indicators": [],
    "Consequences": [
      {
        "Scope": ["Integrity"],
        "Impact": ["Modify Data"],
        "Likelihood": null,
        "Note": null
      },
      {
        "Scope": ["Confidentiality", "Access Control", "Authorization"],
        "Impact": ["Gain Privileges"],
        "Likelihood": null,
        "Note": null
      },
      {
        "Scope": ["Confidentiality", "Integrity", "Availability"],
        "Impact": ["Alter Execution Logic"],
        "Likelihood": null,
        "Note": null
      },
      {
        "Scope": ["Confidentiality"],
        "Impact": ["Read Data"],
        "Likelihood": null,
        "Note": null
      },
      {
        "Scope": ["Availability"],
        "Impact": ["Resource Consumption"],
        "Likelihood": null,
        "Note": "Denial of Service"
      }
    ],
    "Mitigations": [
      "Use safe libraries to access resources such as files.",
      "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.",
      "Use synchronization to control the flow of execution.",
      "Use static analysis tools to find race conditions.",
      "Pay attention to concurrency problems related to the access of resources."
    ],
    "Related_Weaknesses": [
      "367",
      "368",
      "366",
      "370",
      "362",
      "662",
      "691",
      "663",
      "665"
    ],
    "Taxonomy_Mappings": []
  },
  {
    "ID": 81,
    "Name": "Web Server Logs Tampering",
    "Abstraction": "Detailed",
    "Status": "Draft",
    "Description": "Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application.",
    "Extended_Description": null,
    "Alternate_Terms": [],
    "Likelihood_Of_Attack": "Medium",
    "Typical_Severity": "High",
    "Related_Attack_Patterns": [
      { "Exclude_Related": [], "Nature": "ChildOf", "CAPEC_ID": "268" }
    ],
    "Execution_Flow": [
      {
        "Step": "1",
        "Phase": "Explore",
        "Description": "[Determine Application Web Server Log File Format] The attacker observes the system and looks for indicators of which logging utility is being used by the web server.",
        "Technique": [
          "Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information."
        ]
      },
      {
        "Step": "2",
        "Phase": "Experiment",
        "Description": "[Determine Injectable Content] The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.",
        "Technique": [
          "Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc."
        ]
      },
      {
        "Step": "3",
        "Phase": "Exploit",
        "Description": "[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.",
        "Technique": [
          "Indirectly through injection, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example: The HTTP request for \"/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] \"GET /forged-path HTTP/1.1\" 200 - \"-\" USER_AGENT\" may add the log line into Apache \"access_log\" (for example). Different applications may require different encodings of the carriage return and line feed characters.",
          "Directly through log file or database manipulation, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example: The HTTP request for \"/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] \"GET /forged-path HTTP/1.1\" 200 - \"-\" USER_AGENT\" may add the log line into Apache \"access_log\" (for example). Different applications may require different encodings of the carriage return and line feed characters.",
          "Directly through log file or database manipulation, modify existing log entries."
        ]
      }
    ],
    "Prerequisites": [
      "Target server software must be a HTTP server that performs web logging."
    ],
    "Skills_Required": [
      { "Level": "Low", "Description": "To input faked entries into Web logs" }
    ],
    "Resources_Required": [
      "Ability to send specially formatted HTTP request to web server"
    ],
    "Indicators": [],
    "Consequences": [
      {
        "Scope": ["Integrity"],
        "Impact": ["Modify Data"],
        "Likelihood": null,
        "Note": null
      }
    ],
    "Mitigations": [
      "Design: Use input validation before writing to web log",
      "Design: Validate all log data before it is output"
    ],
    "Related_Weaknesses": [
      "117",
      "93",
      "75",
      "221",
      "96",
      "20",
      "150",
      "276",
      "279",
      "116"
    ],
    "Taxonomy_Mappings": []
  },
  {
    "ID": 127,
    "Name": "Directory Indexing",
    "Abstraction": "Detailed",
    "Status": "Draft",
    "Description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
    "Extended_Description": null,
    "Alternate_Terms": [],
    "Likelihood_Of_Attack": "High",
    "Typical_Severity": "Medium",
    "Related_Attack_Patterns": [
      { "Exclude_Related": [], "Nature": "ChildOf", "CAPEC_ID": "54" }
    ],
    "Execution_Flow": [
      {
        "Step": "1",
        "Phase": "Explore",
        "Description": "[Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.",
        "Technique": [
          "Send requests to the web server for common directory names",
          "If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.",
          "Search for uncommon or potentially user created directories that may be present."
        ]
      },
      {
        "Step": "2",
        "Phase": "Experiment",
        "Description": "[Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods",
        "Technique": [
          "Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.",
          "Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.",
          "Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.",
          "Sequentially request a list of common base files to each directory discovered.",
          "Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a \"/\" request"
        ]
      },
      {
        "Step": "3",
        "Phase": "Exploit",
        "Description": "[Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods",
        "Technique": [
          "Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a \"/\" request",
          "Try other known exploits to elevate privileges sufficient to bypass protected directories.",
          "List the files in the directory by issuing a request with the URL ending in a \"/\" slash.",
          "Access the files via direct URL and capture contents.",
          "Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.",
          "Sequentially request a list of common base files to each directory discovered."
        ]
      }
    ],
    "Prerequisites": [
      "The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.",
      "The adversary must be able to control the path that is requested of the target.",
      "The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.",
      "The server version or patch level must not inherently prevent known directory listing attacks from working."
    ],
    "Skills_Required": [
      {
        "Level": "Low",
        "Description": "To issue the request to URL without given a specific file name"
      },
      {
        "Level": "High",
        "Description": "To bypass the access control of the directory of listings"
      }
    ],
    "Resources_Required": [
      "Ability to send HTTP requests to a web application."
    ],
    "Indicators": [],
    "Consequences": [
      {
        "Scope": ["Confidentiality"],
        "Impact": ["Read Data"],
        "Likelihood": null,
        "Note": "Information Leakage"
      }
    ],
    "Mitigations": [
      "1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.",
      "2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".",
      "3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message."
    ],
    "Related_Weaknesses": ["424", "425", "288", "285", "732", "276", "693"],
    "Taxonomy_Mappings": [
      {
        "Taxonomy_Name": "ATTACK",
        "Entry_ID": "1083",
        "Entry_Name": "File and Directory Discovery",
        "Mapping_Fit": null
      }
    ]
  }
]
